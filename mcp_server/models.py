# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T08:59:53+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, constr


class Status(Enum):
    Active = 'Active'
    Closed = 'Closed'
    Inactive = 'Inactive'
    Suspended = 'Suspended'


class AllowedLevel(Enum):
    high = 'high'
    low = 'low'
    medium = 'medium'
    notApplicable = 'notApplicable'


class RequestedLevel(Enum):
    high = 'high'
    low = 'low'
    medium = 'medium'
    notApplicable = 'notApplicable'


class VerificationStatus(Enum):
    invalid = 'invalid'
    pending = 'pending'
    rejected = 'rejected'
    valid = 'valid'


class Type(Enum):
    balancePlatform_accountHolder_updated = 'balancePlatform.accountHolder.updated'
    balancePlatform_accountHolder_created = 'balancePlatform.accountHolder.created'


class AccountSupportingEntityCapability(BaseModel):
    allowed: Optional[bool] = Field(
        None,
        description='Indicates whether the supporting entity capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.',
    )
    allowedLevel: Optional[AllowedLevel] = Field(
        None,
        description='The capability level that is allowed for the account holder.\n\nPossible values: **notApplicable**, **low**, **medium**, **high**.',
    )
    enabled: Optional[bool] = Field(
        None,
        description='Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.',
    )
    id: Optional[str] = Field(None, description='The ID of the supporting entity.')
    requested: Optional[bool] = Field(
        None,
        description='Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.',
    )
    requestedLevel: Optional[RequestedLevel] = Field(
        None,
        description='The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.\n\nPossible values: **notApplicable**, **low**, **medium**, **high**.',
    )
    verificationStatus: Optional[VerificationStatus] = Field(
        None,
        description='The status of the verification checks for the supporting entity capability.\n\nPossible values:\n\n* **pending**: Adyen is running the verification.\n\n* **invalid**: The verification failed. Check if the `errors` array contains more information.\n\n* **valid**: The verification has been successfully completed.\n\n* **rejected**: Adyen has verified the information, but found reasons to not allow the capability.\n',
    )


class Address(BaseModel):
    city: constr(max_length=3000) = Field(
        ..., description='The name of the city. Maximum length: 3000 characters.'
    )
    country: str = Field(
        ...,
        description="The two-character ISO-3166-1 alpha-2 country code. For example, **US**.\n> If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.",
    )
    houseNumberOrName: constr(max_length=3000) = Field(
        ...,
        description='The number or name of the house. Maximum length: 3000 characters.',
    )
    postalCode: str = Field(
        ...,
        description='A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.',
    )
    stateOrProvince: Optional[str] = Field(
        None,
        description='The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.\n> Required for the US and Canada.',
    )
    street: constr(max_length=3000) = Field(
        ...,
        description='The name of the street. Maximum length: 3000 characters.\n> The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.',
    )


class Amount(BaseModel):
    currency: constr(min_length=3, max_length=3) = Field(
        ...,
        description='The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).',
    )
    value: int = Field(
        ...,
        description='The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).',
    )


class Balance(BaseModel):
    available: int = Field(
        ..., description='The remaining amount available for spending.'
    )
    balance: int = Field(..., description='The total amount in the balance.')
    currency: str = Field(
        ...,
        description='The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance.',
    )
    reserved: int = Field(
        ...,
        description='The amount reserved for payments that have been authorised, but have not been captured yet.',
    )


class Type1(Enum):
    balancePlatform_balanceAccount_updated = 'balancePlatform.balanceAccount.updated'
    balancePlatform_balanceAccount_created = 'balancePlatform.balanceAccount.created'


class BalancePlatformNotificationResponse(BaseModel):
    notificationResponse: Optional[str] = Field(
        None,
        description='Respond with **HTTP 200 OK** and `[accepted]` in the response body to [accept the webhook](https://docs.adyen.com/development-resources/webhooks#accept-notifications).',
    )


class BulkAddress(BaseModel):
    city: Optional[str] = Field(None, description='The name of the city.')
    company: Optional[str] = Field(None, description='The name of the company.')
    country: str = Field(
        ...,
        description='The two-character ISO-3166-1 alpha-2 country code. For example, **US**.',
    )
    email: Optional[str] = Field(None, description='The email address.')
    houseNumberOrName: Optional[str] = Field(
        None, description='The house number or name.'
    )
    mobile: Optional[str] = Field(None, description='The full telephone number.')
    postalCode: Optional[str] = Field(
        None,
        description='The postal code.\n\nMaximum length:\n\n* 5 digits for addresses in the US.\n\n* 10 characters for all other countries.',
    )
    stateOrProvince: Optional[str] = Field(
        None,
        description='The two-letter ISO 3166-2 state or province code.\n\nMaximum length: 2 characters for addresses in the US.',
    )
    street: Optional[str] = Field(None, description='The streetname of the house.')


class CapabilityProblem(BaseModel):
    pass


class FormFactor(Enum):
    physical = 'physical'
    unknown = 'unknown'
    virtual = 'virtual'


class CardConfiguration(BaseModel):
    activation: Optional[str] = Field(
        None,
        description='Overrides the activation label design ID defined in the `configurationProfileId`. The activation label is attached to the card and contains the activation instructions.',
    )
    activationUrl: Optional[constr(max_length=255)] = Field(
        None,
        description="Your app's URL, if you want to activate cards through your app. For example, **my-app://ref1236a7d**. A QR code is created based on this URL, and is included in the carrier. Before you use this field, reach out to your Adyen contact to set up the QR code process. \n\nMaximum length: 255 characters.",
    )
    bulkAddress: Optional[BulkAddress] = Field(
        None,
        description='Overrides the shipment bulk address defined in the `configurationProfileId`.',
    )
    cardImageId: Optional[str] = Field(
        None,
        description='The ID of the card image. This is the image that will be printed on the full front of the card.',
    )
    carrier: Optional[str] = Field(
        None,
        description='Overrides the carrier design ID defined in the `configurationProfileId`. The carrier is the letter or packaging to which the card is attached.',
    )
    carrierImageId: Optional[str] = Field(
        None,
        description='The ID of the carrier image. This is the image that will printed on the letter to which the card is attached.',
    )
    configurationProfileId: str = Field(
        ...,
        description='The ID of the card configuration profile that contains the settings of the card. For example, the envelope and PIN mailer designs or the logistics company handling the shipment. All the settings in the profile are applied to the card, unless you provide other fields to override them.\n\nFor example, send the `shipmentMethod` to override the logistics company defined in the card configuration profile.',
    )
    currency: Optional[str] = Field(
        None,
        description='The three-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of the card. For example, **EUR**.',
    )
    envelope: Optional[str] = Field(
        None,
        description='Overrides the envelope design ID defined in the `configurationProfileId`. ',
    )
    insert: Optional[str] = Field(
        None,
        description='Overrides the insert design ID defined in the `configurationProfileId`. An insert is any additional material, such as marketing materials, that are shipped together with the card.',
    )
    language: Optional[str] = Field(
        None,
        description='The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code of the card. For example, **en**.',
    )
    logoImageId: Optional[str] = Field(
        None,
        description='The ID of the logo image. This is the image that will be printed on the partial front of the card, such as a logo on the upper right corner.',
    )
    pinMailer: Optional[str] = Field(
        None,
        description='Overrides the PIN mailer design ID defined in the `configurationProfileId`. The PIN mailer is the letter on which the PIN is printed.',
    )
    shipmentMethod: Optional[str] = Field(
        None,
        description='Overrides the logistics company defined in the `configurationProfileId`.',
    )


class Status2(Enum):
    created = 'created'
    delivered = 'delivered'
    processing = 'processing'
    produced = 'produced'
    rejected = 'rejected'
    shipped = 'shipped'
    unknown = 'unknown'


class CardOrderItemDeliveryStatus(BaseModel):
    status: Optional[Status2] = Field(None, description='Status of the delivery.')
    statusError: Optional[str] = Field(None, description='Error status, if any.')
    statusErrorMessage: Optional[str] = Field(
        None, description='Error message, if any.'
    )
    trackingNumber: Optional[str] = Field(
        None, description='Tracking number of the delivery.'
    )


class Type2(Enum):
    balancePlatform_cardorder_created = 'balancePlatform.cardorder.created'
    balancePlatform_cardorder_updated = 'balancePlatform.cardorder.updated'


class Type3(Enum):
    daily = 'daily'
    weekly = 'weekly'
    monthly = 'monthly'
    balance = 'balance'
    cron = 'cron'


class CronSweepSchedule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cronExpression: str = Field(
        ...,
        description='A [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression) that is used to set the sweep schedule. The schedule uses the time zone of the balance account. For example, **30 17 * * MON** schedules a sweep every Monday at 17:30.\n\nThe expression must have five values separated by a single space in the following order:\n\n* Minute: **0-59**\n\n* Hour: **0-23**\n\n* Day of the month: **1-31**\n\n* Month: **1-12** or **JAN-DEC**\n\n* Day of the week: **0-7** (0 and 7 are Sunday) or **MON-SUN**.\n\nThe following non-standard characters are supported: **&ast;**, **L**, **#**, **W** and **/**. See [crontab guru](https://crontab.guru/) for more examples.',
    )
    type: Optional[Type3] = Field(
        None,
        description='The schedule type.\n\nPossible values:\n\n* **cron**: push out funds based on a cron expression.\n\n* **daily**: push out funds daily at 07:00 AM CET.\n\n* **weekly**: push out funds every Monday at 07:00 AM CET.\n\n* **monthly**: push out funds every first of the month at 07:00 AM CET.\n\n* **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.',
    )


class Expiry(BaseModel):
    month: Optional[str] = Field(
        None, description='The month in which the card will expire.'
    )
    year: Optional[str] = Field(
        None, description='The year in which the card will expire.'
    )


class Type4(Enum):
    iban = 'iban'


class IbanAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    iban: str = Field(
        ...,
        description='The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.',
    )
    type: Type4 = Field(..., description='**iban**')


class JSONPath(BaseModel):
    content: Optional[List[str]] = None


class Name(BaseModel):
    firstName: str = Field(..., description='The first name.')
    lastName: str = Field(..., description='The last name.')


class Status3(Enum):
    Active = 'Active'
    Closed = 'Closed'
    Inactive = 'Inactive'
    Lost = 'Lost'
    Requested = 'Requested'
    Stolen = 'Stolen'
    Suspended = 'Suspended'
    blocked = 'blocked'
    discarded = 'discarded'


class Type5(Enum):
    bankAccount = 'bankAccount'
    card = 'card'


class PaymentInstrumentReference(BaseModel):
    id: str = Field(..., description='The unique identifier of the payment instrument.')


class Type6(Enum):
    balancePlatform_paymentInstrument_created = (
        'balancePlatform.paymentInstrument.created'
    )
    balancePlatform_paymentInstrument_updated = (
        'balancePlatform.paymentInstrument.updated'
    )


class PersonalData(BaseModel):
    dateOfBirth: Optional[str] = Field(
        None,
        description='The date of birth of the person.\nThe date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).',
    )
    idNumber: Optional[str] = Field(None, description='An ID number of the person.')
    nationality: Optional[constr(min_length=2, max_length=2)] = Field(
        None,
        description="The nationality of the person represented by a two-character country code.\n>The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').",
    )


class Type7(Enum):
    Landline = 'Landline'
    Mobile = 'Mobile'


class Phone(BaseModel):
    number: str = Field(
        ...,
        description='The full phone number provided as a single string. \nFor example, **"0031 6 11 22 33 44"**, **"+316/1122-3344"**, \n\n or **"(0031) 611223344"**.',
    )
    type: Type7 = Field(
        ...,
        description='Type of phone number.\nPossible values: \n**Landline**, **Mobile**.\n',
    )


class PhoneType(Enum):
    Fax = 'Fax'
    Landline = 'Landline'
    Mobile = 'Mobile'
    SIP = 'SIP'


class PhoneNumber(BaseModel):
    phoneCountryCode: Optional[str] = Field(
        None,
        description='The two-character ISO-3166-1 alpha-2 country code of the phone number.\nFor example, **US** or **NL**.',
    )
    phoneNumber: Optional[str] = Field(
        None,
        description='The phone number.\nThe inclusion of the phone number country code is not necessary.',
    )
    phoneType: Optional[PhoneType] = Field(
        None,
        description='The type of the phone number.\nPossible values: **Landline**, **Mobile**, **SIP**, **Fax**.',
    )


class Resource(BaseModel):
    balancePlatform: Optional[str] = Field(
        None, description='The unique identifier of the balance platform.'
    )
    creationDate: Optional[datetime] = Field(
        None,
        description='The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.',
    )
    id: Optional[str] = Field(None, description='The ID of the resource.')


class Status4(Enum):
    active = 'active'
    inactive = 'inactive'


class Type8(Enum):
    pull = 'pull'
    push = 'push'


class Type9(Enum):
    balancePlatform_balanceAccountSweep_created = (
        'balancePlatform.balanceAccountSweep.created'
    )
    balancePlatform_balanceAccountSweep_updated = (
        'balancePlatform.balanceAccountSweep.updated'
    )
    balancePlatform_balanceAccountSweep_deleted = (
        'balancePlatform.balanceAccountSweep.deleted'
    )


class Reason(Enum):
    amountLimitExceeded = 'amountLimitExceeded'
    approved = 'approved'
    counterpartyAccountBlocked = 'counterpartyAccountBlocked'
    counterpartyAccountClosed = 'counterpartyAccountClosed'
    counterpartyAccountNotFound = 'counterpartyAccountNotFound'
    counterpartyAddressRequired = 'counterpartyAddressRequired'
    counterpartyBankTimedOut = 'counterpartyBankTimedOut'
    counterpartyBankUnavailable = 'counterpartyBankUnavailable'
    error = 'error'
    notEnoughBalance = 'notEnoughBalance'
    refusedByCounterpartyBank = 'refusedByCounterpartyBank'
    routeNotFound = 'routeNotFound'
    unknown = 'unknown'


class Type10(Enum):
    pull = 'pull'
    push = 'push'


class SweepCounterparty(BaseModel):
    balanceAccountId: Optional[str] = Field(
        None,
        description='The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).\n\n You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.',
    )
    merchantAccount: Optional[str] = Field(
        None,
        description='The merchant account that will be the source of funds, if you are processing payments with Adyen. You can only use this with sweeps of `type` **pull** and `schedule.type` **balance**.',
    )
    transferInstrumentId: Optional[str] = Field(
        None,
        description='The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).\n\nYou can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.',
    )


class Type11(Enum):
    daily = 'daily'
    weekly = 'weekly'
    monthly = 'monthly'
    balance = 'balance'
    cron = 'cron'


class SweepSchedule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Optional[Type11] = Field(
        None,
        description='The schedule type.\n\nPossible values:\n\n* **cron**: push out funds based on a cron expression.\n\n* **daily**: push out funds daily at 07:00 AM CET.\n\n* **weekly**: push out funds every Monday at 07:00 AM CET.\n\n* **monthly**: push out funds every first of the month at 07:00 AM CET.\n\n* **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.',
    )


class AccountType(Enum):
    checking = 'checking'
    savings = 'savings'


class Type12(Enum):
    usLocal = 'usLocal'


class USLocalAccountIdentification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accountNumber: constr(min_length=2, max_length=18) = Field(
        ..., description='The bank account number, without separators or whitespace.'
    )
    accountType: Optional[AccountType] = Field(
        'checking',
        description='The bank account type.\n\nPossible values: **checking** or **savings**. Defaults to **checking**.',
    )
    routingNumber: constr(min_length=9, max_length=9) = Field(
        ...,
        description='The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace.',
    )
    type: Type12 = Field(..., description='**usLocal**')


class Authentication(BaseModel):
    email: Optional[str] = Field(
        None, description='The email address where the one-time password (OTP) is sent.'
    )
    password: Optional[constr(min_length=1, max_length=30)] = Field(
        None,
        description='The password used for 3D Secure password-based authentication. The value must be between 1 to 30 characters and must only contain the following supported characters.\n\n* Characters between **a-z**, **A-Z**, and **0-9**\n\n* Special characters: **äöüßÄÖÜ+-*/ç%()=?!~#\'",;:$&àùòâôûáúó**',
    )
    phone: Optional[Phone] = Field(
        None,
        description='The phone number where the one-time password (OTP) is sent.\n\nThis object must have:\n\n* A `type` set to **mobile**.\n\n* A `number` with a valid country code.\n\n* A `number` with more than 4 digits, excluding the country code.\n\n>Make sure to verify that the card user owns the phone number.',
    )


class CardOrderItem(BaseModel):
    balancePlatform: Optional[str] = Field(
        None, description='The unique identifier of the balance platform.'
    )
    card: Optional[CardOrderItemDeliveryStatus] = Field(
        None, description='Card delivery status.'
    )
    cardOrderItemReference: Optional[str] = Field(
        None, description='The unique identifier of the card order.'
    )
    creationDate: Optional[datetime] = Field(
        None,
        description='The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.',
    )
    id: Optional[str] = Field(None, description='The ID of the resource.')
    paymentInstrumentReference: Optional[str] = Field(
        None,
        description='The unique identifier of the payment instrument related to the card order.',
    )
    pin: Optional[CardOrderItemDeliveryStatus] = Field(
        None, description='PIN delivery status.'
    )
    shippingMethod: Optional[str] = Field(
        None, description='Shipping method used to deliver the card or the PIN.'
    )


class CardOrderNotificationRequest(BaseModel):
    data: CardOrderItem = Field(..., description='Contains event details.')
    environment: str = Field(
        ...,
        description='The environment from which the webhook originated.\n\nPossible values: **test**, **live**.',
    )
    type: Type2 = Field(..., description='Type of notification.')


class Contact(BaseModel):
    address: Optional[Address] = Field(None, description='The address of the contact.')
    email: Optional[str] = Field(None, description='The e-mail address of the contact.')
    fullPhoneNumber: Optional[str] = Field(
        None,
        description='The phone number of the contact provided as a single string.  It will be handled as a landline phone.\n**Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"',
    )
    name: Optional[Name] = Field(None, description='The name of the contact.')
    personalData: Optional[PersonalData] = Field(
        None, description='Personal data of the contact.'
    )
    phoneNumber: Optional[PhoneNumber] = Field(
        None, description='The phone number of the contact.'
    )
    webAddress: Optional[str] = Field(
        None, description='The URL of the website of the contact.'
    )


class ContactDetails(BaseModel):
    address: Address = Field(..., description='The address of the account holder.')
    email: str = Field(..., description='The email address of the account holder.')
    phone: Phone = Field(..., description='The phone number of the account holder.')
    webAddress: Optional[str] = Field(
        None, description="The URL of the account holder's website."
    )


class JSONObject(BaseModel):
    paths: Optional[List[JSONPath]] = None
    rootPath: Optional[JSONPath] = None


class SweepConfiguration(BaseModel):
    balanceAccountId: Optional[str] = Field(
        None,
        description='The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).\n\n You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.',
    )
    id: str = Field(..., description='The unique identifier of the sweep.')
    merchantAccount: Optional[str] = Field(
        None,
        description='The merchant account that will be the source of funds. You can only use this if you are processing payments with Adyen. This can only be used for sweeps of `type` **pull** and `schedule.type` **balance**.',
    )
    schedule: Union[CronSweepSchedule, SweepSchedule] = Field(
        ...,
        description='The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.',
    )
    status: Optional[Status4] = Field(
        None,
        description='The status of the sweep. If not provided, by default, this is set to **active**.\n\nPossible values: \n\n * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration. \n\n * **inactive**: the sweep is disabled and cannot be triggered. \n\n',
    )
    sweepAmount: Optional[Amount] = Field(
        None,
        description='The amount that must be pushed out or pulled in. You can configure either `sweepAmount` or `targetAmount`, not both.',
    )
    targetAmount: Optional[Amount] = Field(
        None,
        description='The amount that must be available in the balance account after the sweep. You can configure either `sweepAmount` or `targetAmount`, not both.',
    )
    transferInstrumentId: Optional[str] = Field(
        None,
        description='The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).\n\nYou can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.',
    )
    triggerAmount: Optional[Amount] = Field(
        None,
        description='The threshold amount that triggers the sweep. If not provided, by default, the amount is set to zero. The `triggerAmount` is evaluated according to the specified `schedule.type`.\n\n* For `type` **pull**, if the balance is less than or equal to the `triggerAmount`, funds are pulled in to the balance account.\n\n* For `type` **push**, if the balance is more than or equal to the `triggerAmount`, funds are pushed out of the balance account.',
    )
    type: Optional[Type8] = Field(
        'push',
        description='The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.\n\nPossible values:\n\n * **push**: _push out funds_ to a destination balance account or transfer instrument.\n\n * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.',
    )


class SweepConfigurationV2(BaseModel):
    counterparty: SweepCounterparty = Field(
        ...,
        description='The destination or the source of the funds, depending on the `type`.\n\nEither a `balanceAccountId`, `transferInstrumentId`, or `merchantAccount` is required.',
    )
    currency: str = Field(
        ...,
        description='The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**.\n\nThe sweep currency must match any of the [balances currencies](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__resParam_balances).',
    )
    description: Optional[str] = Field(
        None,
        description="The message that will be used in the sweep transfer's description body with a maximum length of 140 characters.\n\nIf the message is longer after replacing placeholders, the message will be cut off at 140 characters.",
    )
    id: str = Field(..., description='The unique identifier of the sweep.')
    reason: Optional[Reason] = Field(
        None, description='The reason for disabling the sweep.'
    )
    schedule: Union[CronSweepSchedule, SweepSchedule] = Field(
        ...,
        description='The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.',
    )
    status: Optional[Status4] = Field(
        None,
        description='The status of the sweep. If not provided, by default, this is set to **active**.\n\nPossible values: \n\n * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration. \n\n * **inactive**: the sweep is disabled and cannot be triggered. \n\n',
    )
    sweepAmount: Optional[Amount] = Field(
        None,
        description='The amount that must be pushed out or pulled in. You can configure either `sweepAmount` or `targetAmount`, not both.',
    )
    targetAmount: Optional[Amount] = Field(
        None,
        description='The amount that must be available in the balance account after the sweep. You can configure either `sweepAmount` or `targetAmount`, not both.',
    )
    triggerAmount: Optional[Amount] = Field(
        None,
        description='The threshold amount that triggers the sweep. If not provided, by default, the amount is set to zero. The `triggerAmount` is evaluated according to the specified `schedule.type`.\n\n* For `type` **pull**, if the balance is less than or equal to the `triggerAmount`, funds are pulled in to the balance account.\n\n* For `type` **push**, if the balance is more than or equal to the `triggerAmount`, funds are pushed out of the balance account.',
    )
    type: Optional[Type10] = Field(
        'push',
        description='The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.\n\nPossible values:\n\n * **push**: _push out funds_ to a destination balance account or transfer instrument.\n\n * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.',
    )


class AccountHolderCapability(BaseModel):
    allowed: Optional[bool] = Field(
        None,
        description='Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.',
    )
    allowedLevel: Optional[AllowedLevel] = Field(
        None,
        description='The capability level that is allowed for the account holder.\n\nPossible values: **notApplicable**, **low**, **medium**, **high**.',
    )
    allowedSettings: Optional[JSONObject] = Field(
        None,
        description='A JSON object containing the settings that are allowed for the account holder.',
    )
    enabled: Optional[bool] = Field(
        None,
        description='Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.',
    )
    problems: Optional[List[CapabilityProblem]] = Field(
        None,
        description='Contains verification errors and the actions that you can take to resolve them.',
    )
    requested: Optional[bool] = Field(
        None,
        description='Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.',
    )
    requestedLevel: Optional[RequestedLevel] = Field(
        None,
        description='The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.\n\nPossible values: **notApplicable**, **low**, **medium**, **high**.',
    )
    requestedSettings: Optional[JSONObject] = Field(
        None,
        description='A JSON object containing the settings that were requested for the account holder.',
    )
    transferInstruments: Optional[List[AccountSupportingEntityCapability]] = Field(
        None,
        description='Contains the status of the transfer instruments associated with this capability. ',
    )
    verificationStatus: Optional[VerificationStatus] = Field(
        None,
        description='The status of the verification checks for the capability.\n\nPossible values:\n\n* **pending**: Adyen is running the verification.\n\n* **invalid**: The verification failed. Check if the `errors` array contains more information.\n\n* **valid**: The verification has been successfully completed.\n\n* **rejected**: Adyen has verified the information, but found reasons to not allow the capability.\n',
    )


class BalanceAccount(BaseModel):
    accountHolderId: str = Field(
        ...,
        description='The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account.',
    )
    balances: Optional[List[Balance]] = Field(
        None, description='List of balances with the amount and currency.'
    )
    defaultCurrencyCode: Optional[str] = Field(
        None,
        description='The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance account.\nThe default value is **EUR**.',
    )
    description: Optional[constr(max_length=300)] = Field(
        None,
        description='A human-readable description of the balance account, maximum 300 characters. You can use this parameter to distinguish between multiple balance accounts under an account holder.',
    )
    id: str = Field(..., description='The unique identifier of the balance account.')
    paymentInstruments: Optional[List[PaymentInstrumentReference]] = Field(
        None,
        description='List of [payment instruments](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments) associated with the balance account.',
    )
    reference: Optional[constr(max_length=150)] = Field(
        None,
        description='Your reference for the balance account, maximum 150 characters.',
    )
    status: Optional[Status] = Field(
        None,
        description='The status of the balance account, set to **Active** by default. \n',
    )
    sweepConfigurations: Optional[Dict[str, SweepConfiguration]] = Field(
        None,
        description='Contains key-value pairs that specify configurations for balance sweeps per currency code. A sweep pulls in or pushes out funds based on a defined schedule, amount, and a source (for pulling funds) or a destination (for pushing funds).\n\nThe key must be a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**. The value must be an object containing the sweep configuration.',
    )
    timeZone: Optional[str] = Field(
        None,
        description='The [time zone](https://www.iana.org/time-zones) of the balance account. For example, **Europe/Amsterdam**.\nDefaults to the time zone of the account holder if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).',
    )


class BalanceAccountNotificationData(BaseModel):
    balanceAccount: Optional[BalanceAccount] = None
    balancePlatform: Optional[str] = Field(
        None, description='The unique identifier of the balance platform.'
    )


class BalanceAccountNotificationRequest(BaseModel):
    data: BalanceAccountNotificationData = Field(
        ..., description='Contains event details.'
    )
    environment: str = Field(
        ...,
        description='The environment from which the webhook originated.\n\nPossible values: **test**, **live**.',
    )
    type: Type1 = Field(..., description='Type of notification.')


class Card(BaseModel):
    authentication: Optional[Authentication] = Field(
        None,
        description="Contains the card user's password and mobile phone number. This is required when you issue cards that can be used to make online payments within the EEA and the UK, or can be added to digital wallets. Refer to [3D Secure and digital wallets](https://docs.adyen.com/issuing/3d-secure-and-wallets) for more information.",
    )
    bin: Optional[str] = Field(
        None, description='The bank identification number (BIN) of the card number.'
    )
    brand: str = Field(
        ...,
        description='The brand of the physical or the virtual card.\nPossible values: **visa**, **mc**.',
    )
    brandVariant: str = Field(
        ...,
        description='The brand variant of the physical or the virtual card.\n>Contact your Adyen Implementation Manager to get the values that are relevant to your integration. Examples: **visadebit**, **mcprepaid**.',
    )
    cardholderName: constr(max_length=26) = Field(
        ..., description='The name of the cardholder.\n Maximum length: 26 characters.'
    )
    configuration: Optional[CardConfiguration] = Field(
        None,
        description='Settings required when creating a physical or a virtual card. \n\nReach out to your Adyen contact to get the values that you can send in this object.',
    )
    cvc: Optional[str] = Field(
        None,
        description='The CVC2 value of the card.\n> The CVC2 is not sent by default. This is only returned in the `POST` response for single-use virtual cards.',
    )
    deliveryContact: Optional[Contact] = Field(
        None,
        description='The delivery contact (name and address) for physical card delivery.',
    )
    expiration: Optional[Expiry] = Field(
        None, description='The expiration date of the card.'
    )
    formFactor: FormFactor = Field(
        ...,
        description='The form factor of the card.\nPossible values: **virtual**, **physical**.',
    )
    lastFour: Optional[str] = Field(
        None, description='Last last four digits of the card number.'
    )
    number: str = Field(
        ...,
        description='The primary account number (PAN) of the card.\n> The PAN is masked by default and returned only for single-use virtual cards.',
    )


class PaymentInstrument(BaseModel):
    balanceAccountId: str = Field(
        ...,
        description='The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.',
    )
    bankAccount: Optional[
        Union[IbanAccountIdentification, USLocalAccountIdentification]
    ] = Field(
        None,
        description='Contains the business account details. Returned when you create a payment instrument with `type` **bankAccount**.',
    )
    card: Optional[Card] = Field(
        None,
        description='Contains information about the card payment instrument. Returned when you create a payment instrument with `type` **card**.',
    )
    description: Optional[constr(max_length=300)] = Field(
        None,
        description='Your description for the payment instrument, maximum 300 characters.',
    )
    id: str = Field(..., description='The unique identifier of the payment instrument.')
    issuingCountryCode: str = Field(
        ...,
        description='The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.',
    )
    paymentInstrumentGroupId: Optional[str] = Field(
        None,
        description='The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs.',
    )
    reference: Optional[constr(max_length=150)] = Field(
        None,
        description='Your reference for the payment instrument, maximum 150 characters.',
    )
    status: Optional[Status3] = Field(
        None,
        description='The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **Active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **Requested**.\n\nPossible values: \n\n * **Active**:  The payment instrument is active and can be used to make payments. \n\n * **Requested**: The payment instrument has been requested. This state is applicable for physical cards. \n\n* **Inactive**: The payment instrument is inactive and cannot be used to make payments. \n\n * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments. \n\n * **Closed**: The payment instrument is permanently closed. This action cannot be undone. \n\n* **Stolen** \n\n * **Lost**\n\n ',
    )
    type: Type5 = Field(
        ...,
        description='Type of payment instrument.\n\nPossible value: **card**, **bankAccount**. ',
    )


class PaymentInstrumentNotificationData(BaseModel):
    balancePlatform: Optional[str] = Field(
        None, description='The unique identifier of the balance platform.'
    )
    paymentInstrument: Optional[PaymentInstrument] = Field(
        None,
        description='Contains information about the payment instrument resource that triggered the event.',
    )


class PaymentNotificationRequest(BaseModel):
    data: PaymentInstrumentNotificationData = Field(
        ..., description='Contains event details.'
    )
    environment: str = Field(
        ...,
        description='The environment from which the webhook originated.\n\nPossible values: **test**, **live**.',
    )
    type: Type6 = Field(..., description='Type of notification.')


class SweepConfigurationNotificationData(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description='The unique identifier of the balance account for which the sweep was configured.',
    )
    balancePlatform: Optional[str] = Field(
        None, description='The unique identifier of the balance platform.'
    )
    sweep: Optional[SweepConfigurationV2] = Field(
        None,
        description='Contains information about the sweep resource that triggered the event.',
    )


class SweepConfigurationNotificationRequest(BaseModel):
    data: SweepConfigurationNotificationData = Field(
        ..., description='Contains event details.'
    )
    environment: str = Field(
        ...,
        description='The environment from which the webhook originated.\n\nPossible values: **test**, **live**.',
    )
    type: Type9 = Field(..., description='Type of notification.')


class AccountHolder(BaseModel):
    balancePlatform: Optional[str] = Field(
        None,
        description='The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the account holder belongs. Required in the request if your API credentials can be used for multiple balance platforms.',
    )
    capabilities: Optional[Dict[str, AccountHolderCapability]] = Field(
        None,
        description='Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing. The value is an object containing the settings for the capability.',
    )
    contactDetails: Optional[ContactDetails] = Field(
        None, description='Contact details of the account holder.'
    )
    description: Optional[constr(max_length=300)] = Field(
        None,
        description='Your description for the account holder, maximum 300 characters.',
    )
    id: str = Field(..., description='The unique identifier of the account holder.')
    legalEntityId: str = Field(
        ...,
        description='The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) associated with the account holder. Adyen performs a verification process against the legal entity of the account holder.',
    )
    primaryBalanceAccount: Optional[str] = Field(
        None,
        description="The ID of the account holder's primary balance account. By default, this is set to the first balance account that you create for the account holder. To assign a different balance account, send a PATCH request.",
    )
    reference: Optional[constr(max_length=150)] = Field(
        None,
        description='Your reference for the account holder, maximum 150 characters.',
    )
    status: Optional[Status] = Field(
        None,
        description='The status of the account holder.\n\nPossible values: \n\n * **Active**: The account holder is active. This is the default status when creating an account holder. \n\n * **Inactive (Deprecated)**: The account holder is temporarily inactive due to missing KYC details. You can set the account back to active by providing the missing KYC details. \n\n * **Suspended**: The account holder is permanently deactivated by Adyen. This action cannot be undone. \n\n* **Closed**: The account holder is permanently deactivated by you. This action cannot be undone.',
    )
    timeZone: Optional[str] = Field(
        None,
        description='The [time zone](https://www.iana.org/time-zones) of the account holder. For example, **Europe/Amsterdam**.\nDefaults to the time zone of the balance platform if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).',
    )


class AccountHolderNotificationData(BaseModel):
    accountHolder: Optional[AccountHolder] = Field(
        None,
        description='Contains information about the account holder resource that triggered the event.',
    )
    balancePlatform: Optional[str] = Field(
        None, description='The unique identifier of the balance platform.'
    )


class AccountHolderNotificationRequest(BaseModel):
    data: AccountHolderNotificationData = Field(
        ..., description='Contains event details.'
    )
    environment: str = Field(
        ...,
        description='The environment from which the webhook originated.\n\nPossible values: **test**, **live**.',
    )
    type: Type = Field(..., description='Type of notification.')
